\n'use server';\n\nimport {NextRequest, NextResponse} from 'next/server';\nimport axios from 'axios';\nimport {getLinkedInOAuthConfig, getLinkedInProfileByToken} from '@/services/linkedin'; // Using getLinkedInProfileByToken\n\ninterface LinkedInTokenResponse {\n  access_token: string;\n  expires_in: number;\n  scope: string;\n  token_type: string;\n  id_token?: string; \n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    const {code, state: receivedState} = body; // Assuming state might be used for CSRF\n\n    if (!code) {\n      return NextResponse.json({error: 'Authorization code is missing'}, {status: 400});\n    }\n\n    const oauthConfig = await getLinkedInOAuthConfig(); \n\n    if (!oauthConfig.clientSecret) {\n      console.error('LINKEDIN_CLIENT_SECRET is not configured on the server.');\n      return NextResponse.json({ error: 'Server configuration error: LinkedIn client secret missing.' }, { status: 500 });\n    }\n\n    const tokenUrl = 'https://www.linkedin.com/oauth/v2/accessToken';\n    const params = new URLSearchParams();\n    params.append('grant_type', 'authorization_code');\n    params.append('code', code as string);\n    params.append('redirect_uri', oauthConfig.redirectUri); \n    params.append('client_id', oauthConfig.clientId);\n    params.append('client_secret', oauthConfig.clientSecret);\n\n    let accessToken: string;\n    try {\n      const tokenResponse = await axios.post<LinkedInTokenResponse>(tokenUrl, params, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n      accessToken = tokenResponse.data.access_token;\n      console.log(\"LinkedIn Access Token obtained successfully.\");\n    } catch (tokenError: any) {\n      console.error('Error exchanging LinkedIn code for token:', tokenError.response?.data || tokenError.message);\n      const errorMessage = tokenError.response?.data?.error_description || tokenError.response?.data?.error || tokenError.message || 'Failed to exchange authorization code with LinkedIn.';\n      const status = tokenError.response?.status || 500;\n      return NextResponse.json({error: errorMessage, details: tokenError.response?.data }, {status});\n    }\n    \n    let userProfile: any;\n    try {\n      // Use the service function to get profile data\n      userProfile = await getLinkedInProfileByToken(accessToken);\n      console.log(\"LinkedIn User Profile fetched successfully:\", userProfile);\n    } catch (profileError: any) {\n      console.error('Error fetching LinkedIn profile data using service:', profileError.message);\n      // profileError might already be an Error instance from the service\n      const errorMessage = profileError.message || 'Failed to fetch profile data from LinkedIn.';\n      // Status might not be available if it's a generic error from the service\n      const status = (profileError.isAxiosError && profileError.response?.status) || 500;\n      return NextResponse.json({error: errorMessage, details: (profileError.isAxiosError && profileError.response?.data) || profileError.toString() }, {status});\n    }\n\n    // TODO: Store the accessToken and profileData securely, associated with the user's session/account\n    // This part is application-specific. For example, update user document in Firestore.\n    // e.g., await db.collection('users').doc(auth.userId).update({ linkedInAccessToken: accessToken, linkedInProfile: userProfile });\n\n    return NextResponse.json({profile: userProfile, accessToken}, {status: 200});\n\n  } catch (error: any) {\n    console.error('General error in LinkedIn callback handler:', error.message);\n    return NextResponse.json({error: 'An unexpected error occurred during LinkedIn authentication.', details: error.message }, {status: 500});\n  }\n}\